  /**
   * Dynamically construct the SQL query with params
   *
   * @param tableName table
   * @param operation support SELECT, UPDATE AND DELETE
   * @param mapData query params and value eg: <col_1, val_1>
   * @return constructed sql query
   */
  /*
   *
   * Usage:
   *
   *    1) SELECT operation
   *        -- input param for where condition in mapData
   *            eg:     JDBCUtils.createSql("test_table", "select",
   *                                 new HashMap<Object, Object>() {{
   *                                      put("id", 1);
   *                                      put("name", "xxx");
   *                                }});
   *                    The return sql is: select * from test_table where id=1 and name='xxx'
   *                    ps: the order of the where condition is not guaranteed.
   *
   *    2) UPDATE operation
   *        -- input param for data to be update use prefix 'Key_" for the value that you want to have in where condition in mapData
   *            eg:     JDBCUtils.createSql("test_table", "update",
   *                                 new HashMap<Object, Object>() {{
   *                                      put("id", 1);
   *                                      put("name", "xxx");
   *                                      put("Key_age", 1);
   *                                }});
   *                    The return sql is: update test_table set id=1,name='xxx' where age=1
   *                    ps: the order of the where and set condition is not guaranteed.
   *
   *    3) DELETE operation
   *        -- input param for where condition in mapData
   *            eg:     JDBCUtils.createSql("test_table", "delete",
   *                                 new HashMap<Object, Object>() {{
   *                                      put("id", 1);
   *                                      put("name", "xxx");
   *                                }});
   *                    The return sql is: delete from test_table where id=1 and name='xxx'
   *                    ps: the order of the where condition is not guaranteed.
   *
   *    4) INSERT operation
   *        -- input param in mapData
   *            eg:     JDBCUtils.createSql("test_table", "insert",
   *                                 new HashMap<Object, Object>() {{
   *                                      put("id", 1);
   *                                      put("name", "xxx");
   *                                }});
   *                    The return sql is: INSERT INTO test_table (name,id) VALUES('xxx',1)
   *                    ps: the order of the values is not guaranteed.
   *
   */
  public static String createSql(
      @NonNull String tableName, @NonNull SqlOperation operation, @NonNull Map<?, ?> mapData) {
    String sql = null;

    String condition = " * FROM " + tableName + " WHERE ";
    if (operation.equals(SqlOperation.UPDATE)) {
      condition = " " + tableName + " SET ";
    } else if (operation.equals(SqlOperation.DELETE)) {
      condition = " FROM " + tableName + " WHERE ";
    } else if (operation.equals(SqlOperation.INSERT)) {
      condition = " INTO " + tableName + " (";
      String link = "";
      Iterator<?> iterator = mapData.keySet().iterator();
      while (iterator.hasNext()) {
        String next = (String) iterator.next();
        condition += link + next;
        link = ",";
      }
      condition += ") VALUES (";
    }
    String value = "";
    String link = "";
    String keyValueOperations = " WHERE ";
    Iterator<? extends Map.Entry<?, ?>> iterator = mapData.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<?, ?> next = iterator.next();
      if (next.getValue() instanceof String) {
        value = "'" + next.getValue() + "'";
      } else {
        value = "" + next.getValue() + "";
      }
      if (next.getKey().toString().lastIndexOf("Key_") == -1) {
        if (!operation.equals(SqlOperation.INSERT)) {
          if (operation.equals(SqlOperation.SELECT) || operation.equals(SqlOperation.DELETE)) {
            condition += link + "" + next.getKey();
            condition += "=" + value;
            link = " AND ";
          } else {
            condition += link + "" + next.getKey();
            condition += "=" + value;
            link = ",";
          }
        } else {
          condition += link + value;
          link = ",";
        }
      } else {
        continue;
      }
    }

    if (operation.equals(SqlOperation.INSERT)) {
      condition += ")";
    } else if (operation.equals(SqlOperation.UPDATE)) {
      condition += " WHERE ";
      String and = "";
      Iterator<? extends Map.Entry<?, ?>> iterator1 = mapData.entrySet().iterator();
      while (iterator1.hasNext()) {
        Map.Entry<?, ?> next = iterator1.next();
        if (next.getValue() instanceof String) {
          value = "'" + next.getValue() + "'";
        } else {
          value = "" + next.getValue() + "";
        }
        String key = next.getKey().toString();
        if (key.lastIndexOf("Key_") != -1) {
          key = key.substring(key.indexOf("Key_") + 4, key.length());
          condition += and + key + "=" + value;
          and = " AND ";
        }
      }
    }

    sql = operation.getOperation() + condition;
    return sql;
  }

  public enum SqlOperation {
    INSERT("insert"),
    SELECT("select"),
    UPDATE("update"),
    DELETE("delete");

    private final String operation;

    SqlOperation(String operation) {
      this.operation = operation;
    }

    public String getOperation() {
      return operation;
    }
  }
}



###########TEST#########################

  @Test
  public void testCreateSelectSql() {
    String select =
        JDBCUtils.createSql(
            "test_table",
            JDBCUtils.SqlOperation.SELECT,
            new HashMap<Object, Object>() {
              {
                put("id", 1);
                put("name", "xxx");
              }
            });
    Assert.assertTrue(
        select.equalsIgnoreCase("select * from test_table where id=1 and name='xxx'")
            || select.equalsIgnoreCase("select * from test_table where name='xxx' AND id=1"));
  }

  @Test
  public void testCreateUpdateSql() {
    String update =
        JDBCUtils.createSql(
            "test_table",
            JDBCUtils.SqlOperation.UPDATE,
            new HashMap<Object, Object>() {
              {
                put("id", 1);
                put("name", "xxx");
                put("Key_age", 1);
              }
            });
    Assert.assertTrue(
        update.equalsIgnoreCase("update test_table set id=1,name='xxx' where age=1")
            || update.equalsIgnoreCase("update test_table set name='xxx',id=1 where age=1"));
  }

  @Test
  public void testCreateDeleteSql() {
    String delete =
        JDBCUtils.createSql(
            "test_table",
            JDBCUtils.SqlOperation.DELETE,
            new HashMap<Object, Object>() {
              {
                put("id", 1);
                put("name", "xxx");
              }
            });
    Assert.assertTrue(
        delete.equalsIgnoreCase("delete from test_table where id=1 and name='xxx'")
            || delete.equalsIgnoreCase("delete from test_table where name='xxx' AND id=1"));
  }

  @Test
  public void testInsertSql() {
    String insert =
        JDBCUtils.createSql(
            "test_table",
            JDBCUtils.SqlOperation.INSERT,
            new HashMap<Object, Object>() {
              {
                put("id", 1);
                put("name", "xxx");
              }
            });
    Assert.assertTrue(
        insert.equalsIgnoreCase("insert into test_table (id,name) values (1,'xxx')")
            || insert.equalsIgnoreCase("insert into test_table (name,id) values ('xxx',1)"));
  }


